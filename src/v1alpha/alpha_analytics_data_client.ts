// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';
import * as path from 'path';

import * as protos from '../../protos/protos';
import * as gapicConfig from './alpha_analytics_data_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Google Analytics reporting data service.
 * @class
 * @memberof v1alpha
 */
export class AlphaAnalyticsDataClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  alphaAnalyticsDataStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AlphaAnalyticsDataClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof AlphaAnalyticsDataClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the AlphaAnalyticsDataClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof AlphaAnalyticsDataClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      metadataPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/metadata'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.analytics.data.v1alpha.AlphaAnalyticsData',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.alphaAnalyticsDataStub) {
      return this.alphaAnalyticsDataStub;
    }

    // Put together the "service stub" for
    // google.analytics.data.v1alpha.AlphaAnalyticsData.
    this.alphaAnalyticsDataStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.analytics.data.v1alpha.AlphaAnalyticsData'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.analytics.data.v1alpha
            .AlphaAnalyticsData,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const alphaAnalyticsDataStubMethods = [
      'runReport',
      'runPivotReport',
      'batchRunReports',
      'batchRunPivotReports',
      'getUniversalMetadata',
      'getMetadata',
    ];
    for (const methodName of alphaAnalyticsDataStubMethods) {
      const callPromise = this.alphaAnalyticsDataStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.alphaAnalyticsDataStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'analyticsdata.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'analyticsdata.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/analytics',
      'https://www.googleapis.com/auth/analytics.readonly',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  runReport(
    request: protos.google.analytics.data.v1alpha.IRunReportRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IRunReportResponse,
      protos.google.analytics.data.v1alpha.IRunReportRequest | undefined,
      {} | undefined
    ]
  >;
  runReport(
    request: protos.google.analytics.data.v1alpha.IRunReportRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IRunReportResponse,
      protos.google.analytics.data.v1alpha.IRunReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  runReport(
    request: protos.google.analytics.data.v1alpha.IRunReportRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IRunReportResponse,
      protos.google.analytics.data.v1alpha.IRunReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a customized report of your Google Analytics event data. Reports
   * contain statistics derived from data collected by the Google Analytics
   * tracking code. The data returned from the API is as a table with columns
   * for the requested dimensions and metrics. Metrics are individual
   * measurements of user activity on your property, such as active users or
   * event count. Dimensions break down metrics across some common criteria,
   * such as country or event name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.analytics.data.v1alpha.Entity} request.entity
   *   A property whose events are tracked. Within a batch request, this entity
   *   should either be unspecified or consistent with the batch-level entity.
   * @param {number[]} request.dimensions
   *   The dimensions requested and displayed.
   * @param {number[]} request.metrics
   *   The metrics requested and displayed.
   * @param {number[]} request.dateRanges
   *   Date ranges of data to read. If multiple date ranges are requested, each
   *   response row will contain a zero based date range index. If two date
   *   ranges overlap, the event data for the overlapping days is included in the
   *   response rows for both date ranges. In a cohort request, this `dateRanges`
   *   must be unspecified.
   * @param {number} request.offset
   *   The row count of the start row. The first row is counted as row 0.
   * @param {number} request.limit
   *   The number of rows to return. If unspecified, 10 rows are returned. If
   *   -1, all rows are returned.
   * @param {number[]} request.metricAggregations
   *   Aggregation of metrics. Aggregated metric values will be shown in rows
   *   where the dimension_values are set to "RESERVED_(MetricAggregation)".
   * @param {google.analytics.data.v1alpha.FilterExpression} request.dimensionFilter
   *   The filter clause of dimensions. Dimensions must be requested to be used in
   *   this filter. Metrics cannot be used in this filter.
   * @param {google.analytics.data.v1alpha.FilterExpression} request.metricFilter
   *   The filter clause of metrics. Applied at post aggregation phase, similar to
   *   SQL having-clause. Metrics must be requested to be used in this filter.
   *   Dimensions cannot be used in this filter.
   * @param {number[]} request.orderBys
   *   Specifies how rows are ordered in the response.
   * @param {string} request.currencyCode
   *   A currency code in ISO4217 format, such as "AED", "USD", "JPY".
   *   If the field is empty, the report uses the entity's default currency.
   * @param {google.analytics.data.v1alpha.CohortSpec} request.cohortSpec
   *   Cohort group associated with this request. If there is a cohort group
   *   in the request the 'cohort' dimension must be present.
   * @param {boolean} request.keepEmptyRows
   *   If false or unspecified, each row with all metrics equal to 0 will not be
   *   returned. If true, these rows will be returned if they are not separately
   *   removed by a filter.
   * @param {boolean} request.returnPropertyQuota
   *   Toggles whether to return the current state of this Analytics Property's
   *   quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [RunReportResponse]{@link google.analytics.data.v1alpha.RunReportResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  runReport(
    request: protos.google.analytics.data.v1alpha.IRunReportRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IRunReportResponse,
          | protos.google.analytics.data.v1alpha.IRunReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IRunReportResponse,
      protos.google.analytics.data.v1alpha.IRunReportRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IRunReportResponse,
      protos.google.analytics.data.v1alpha.IRunReportRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.runReport(request, options, callback);
  }
  runPivotReport(
    request: protos.google.analytics.data.v1alpha.IRunPivotReportRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
      protos.google.analytics.data.v1alpha.IRunPivotReportRequest | undefined,
      {} | undefined
    ]
  >;
  runPivotReport(
    request: protos.google.analytics.data.v1alpha.IRunPivotReportRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
      | protos.google.analytics.data.v1alpha.IRunPivotReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  runPivotReport(
    request: protos.google.analytics.data.v1alpha.IRunPivotReportRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
      | protos.google.analytics.data.v1alpha.IRunPivotReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns a customized pivot report of your Google Analytics event data.
   * Pivot reports are more advanced and expressive formats than regular
   * reports. In a pivot report, dimensions are only visible if they are
   * included in a pivot. Multiple pivots can be specified to further dissect
   * your data.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.analytics.data.v1alpha.Entity} request.entity
   *   A property whose events are tracked. Within a batch request, this entity
   *   should either be unspecified or consistent with the batch-level entity.
   * @param {number[]} request.dimensions
   *   The dimensions requested. All defined dimensions must be used by one of the
   *   following: dimension_expression, dimension_filter, pivots, order_bys.
   * @param {number[]} request.metrics
   *   The metrics requested, at least one metric needs to be specified. All
   *   defined metrics must be used by one of the following: metric_expression,
   *   metric_filter, order_bys.
   * @param {google.analytics.data.v1alpha.FilterExpression} request.dimensionFilter
   *   The filter clause of dimensions. Dimensions must be requested to be used in
   *   this filter. Metrics cannot be used in this filter.
   * @param {google.analytics.data.v1alpha.FilterExpression} request.metricFilter
   *   The filter clause of metrics. Applied at post aggregation phase, similar to
   *   SQL having-clause. Metrics must be requested to be used in this filter.
   *   Dimensions cannot be used in this filter.
   * @param {number[]} request.pivots
   *   Describes the visual format of the report's dimensions in columns or rows.
   *   The union of the fieldNames (dimension names) in all pivots must be a
   *   subset of dimension names defined in Dimensions. No two pivots can share a
   *   dimension. A dimension is only visible if it appears in a pivot.
   * @param {number[]} request.dateRanges
   *   The date range to retrieve event data for the report. If multiple date
   *   ranges are specified, event data from each date range is used in the
   *   report. A special dimension with field name "dateRange" can be included in
   *   a Pivot's field names; if included, the report compares between date
   *   ranges. In a cohort request, this `dateRanges` must be unspecified.
   * @param {string} request.currencyCode
   *   A currency code in ISO4217 format, such as "AED", "USD", "JPY".
   *   If the field is empty, the report uses the entity's default currency.
   * @param {google.analytics.data.v1alpha.CohortSpec} request.cohortSpec
   *   Cohort group associated with this request. If there is a cohort group
   *   in the request the 'cohort' dimension must be present.
   * @param {boolean} request.keepEmptyRows
   *   If false or unspecified, each row with all metrics equal to 0 will not be
   *   returned. If true, these rows will be returned if they are not separately
   *   removed by a filter.
   * @param {boolean} request.returnPropertyQuota
   *   Toggles whether to return the current state of this Analytics Property's
   *   quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [RunPivotReportResponse]{@link google.analytics.data.v1alpha.RunPivotReportResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  runPivotReport(
    request: protos.google.analytics.data.v1alpha.IRunPivotReportRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
          | protos.google.analytics.data.v1alpha.IRunPivotReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
      | protos.google.analytics.data.v1alpha.IRunPivotReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IRunPivotReportResponse,
      protos.google.analytics.data.v1alpha.IRunPivotReportRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.runPivotReport(request, options, callback);
  }
  batchRunReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunReportsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
      protos.google.analytics.data.v1alpha.IBatchRunReportsRequest | undefined,
      {} | undefined
    ]
  >;
  batchRunReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunReportsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchRunReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunReportsRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns multiple reports in a batch. All reports must be for the same
   * Entity.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.analytics.data.v1alpha.Entity} request.entity
   *   A property whose events are tracked. This entity must be specified for the
   *   batch. The entity within RunReportRequest may either be unspecified or
   *   consistent with this entity.
   * @param {number[]} request.requests
   *   Individual requests. Each request has a separate report response. Each
   *   batch request is allowed up to 5 requests.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchRunReportsResponse]{@link google.analytics.data.v1alpha.BatchRunReportsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchRunReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunReportsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
          | protos.google.analytics.data.v1alpha.IBatchRunReportsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IBatchRunReportsResponse,
      protos.google.analytics.data.v1alpha.IBatchRunReportsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.batchRunReports(request, options, callback);
  }
  batchRunPivotReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
      (
        | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchRunPivotReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchRunPivotReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns multiple pivot reports in a batch. All reports must be for the same
   * Entity.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.analytics.data.v1alpha.Entity} request.entity
   *   A property whose events are tracked. This entity must be specified for the
   *   batch. The entity within RunPivotReportRequest may either be unspecified or
   *   consistent with this entity.
   * @param {number[]} request.requests
   *   Individual requests. Each request has a separate pivot report response.
   *   Each batch request is allowed up to 5 requests.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchRunPivotReportsResponse]{@link google.analytics.data.v1alpha.BatchRunPivotReportsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchRunPivotReports(
    request: protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
          | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
      | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IBatchRunPivotReportsResponse,
      (
        | protos.google.analytics.data.v1alpha.IBatchRunPivotReportsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.batchRunPivotReports(request, options, callback);
  }
  getUniversalMetadata(
    request: protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IUniversalMetadata,
      (
        | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getUniversalMetadata(
    request: protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IUniversalMetadata,
      | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getUniversalMetadata(
    request: protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IUniversalMetadata,
      | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns metadata for dimensions and metrics available in reporting methods.
   * Used to explore the dimensions and metrics. Dimensions and metrics will be
   * mostly added over time, but renames and deletions may occur.
   *
   * This method returns Universal Metadata. Universal Metadata are dimensions
   * and metrics applicable to any property such as `country` and `totalUsers`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [UniversalMetadata]{@link google.analytics.data.v1alpha.UniversalMetadata}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getUniversalMetadata(
    request: protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IUniversalMetadata,
          | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IUniversalMetadata,
      | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IUniversalMetadata,
      (
        | protos.google.analytics.data.v1alpha.IGetUniversalMetadataRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getUniversalMetadata(request, options, callback);
  }
  getMetadata(
    request: protos.google.analytics.data.v1alpha.IGetMetadataRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IMetadata,
      protos.google.analytics.data.v1alpha.IGetMetadataRequest | undefined,
      {} | undefined
    ]
  >;
  getMetadata(
    request: protos.google.analytics.data.v1alpha.IGetMetadataRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IMetadata,
      | protos.google.analytics.data.v1alpha.IGetMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadata(
    request: protos.google.analytics.data.v1alpha.IGetMetadataRequest,
    callback: Callback<
      protos.google.analytics.data.v1alpha.IMetadata,
      | protos.google.analytics.data.v1alpha.IGetMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns metadata for dimensions and metrics available in reporting methods.
   * Used to explore the dimensions and metrics. In this method, a Google
   * Analytics 4 (GA4) Property Identifier is specified in the request, and
   * the metadata response includes Custom dimensions and metrics as well as
   * Universal metadata.
   *
   * For example if a custom metric with parameter name `levels_unlocked` is
   * registered to a property, the Metadata response will contain
   * `customEvent:levels_unlocked`. Universal metadata are dimensions and
   * metrics applicable to any property such as `country` and `totalUsers`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the metadata to retrieve. This name field is
   *   specified in the URL path and not URL parameters. Property is a numeric
   *   Google Analytics 4 (GA4) Property identifier.
   *
   *   Example: properties/1234/metadata
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Metadata]{@link google.analytics.data.v1alpha.Metadata}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getMetadata(
    request: protos.google.analytics.data.v1alpha.IGetMetadataRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.analytics.data.v1alpha.IMetadata,
          | protos.google.analytics.data.v1alpha.IGetMetadataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.analytics.data.v1alpha.IMetadata,
      | protos.google.analytics.data.v1alpha.IGetMetadataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.analytics.data.v1alpha.IMetadata,
      protos.google.analytics.data.v1alpha.IGetMetadataRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getMetadata(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified metadata resource name string.
   *
   * @param {string} property
   * @returns {string} Resource name string.
   */
  metadataPath(property: string) {
    return this.pathTemplates.metadataPathTemplate.render({
      property: property,
    });
  }

  /**
   * Parse the property from Metadata resource.
   *
   * @param {string} metadataName
   *   A fully-qualified path representing Metadata resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromMetadataName(metadataName: string) {
    return this.pathTemplates.metadataPathTemplate.match(metadataName).property;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.alphaAnalyticsDataStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
